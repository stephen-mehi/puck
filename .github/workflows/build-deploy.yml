name: build and deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: self-hosted
    defaults:
      run:
        shell: powershell
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          cache: false   # no packages.lock.json; disable built-in cache

      - name: Restore dependencies
        run: dotnet restore

      - name: Build application
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --no-build

      - name: Build the Docker image (local only)
        run: |
          $tag = "puck:$((git rev-parse --short HEAD))-$((Get-Date -Format 'yyyyMMddHHmmss'))"
          Write-Output $tag
          docker build -t $tag .

  docker:
    runs-on: self-hosted
    needs: build
    if: github.event_name == 'push'
    defaults:
      run:
        shell: powershell
    steps:
      - uses: actions/checkout@v4
  
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_UN }}
          password: ${{ secrets.DOCKERHUB_PAT }}
  
      - name: Build & Push Docker image (SHA + timestamp)
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $sha    = "${{ github.sha }}"
          $short  = $sha.Substring(0,7)
          $stamp  = Get-Date -Format 'yyyyMMddHHmmss'
          $repo   = 'smehi/puck'
      
          # Either interpolate safely with $()...
          $shaTag = "$($repo):$sha"
          $nice   = "$($repo):$short-$stamp"
      
          # ...or use -f formatting:
          # $shaTag = '{0}:{1}' -f $repo, $sha
          # $nice   = '{0}:{1}-{2}' -f $repo, $short, $stamp
      
          Write-Host "Building $shaTag and $nice"
          docker build -t "$shaTag" -t "$nice" .
          docker push "$shaTag"
          docker push "$nice"



  deploy:
    name: kubernetes deploy
    environment:
      name: dev
    runs-on: self-hosted
    needs: docker
    if: github.event_name == 'push' && needs.docker.result == 'success'
    defaults:
      run:
        shell: powershell
    steps:
      - uses: actions/checkout@v4

      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v3
        with:
          version: 'v1.30.0'

      - name: Compute image & kubeconfig
        run: |
          $ErrorActionPreference = 'Stop'
          $newImage = "smehi/puck:${{ github.sha }}"
          $kube = Join-Path $HOME ".kube\config\client.config"
          if (-not (Test-Path $kube)) { throw "kubeconfig not found at $kube" }
          "NEW_IMAGE=$newImage"       >> $env:GITHUB_ENV
          "KUBECONFIG_PATH=$kube"     >> $env:GITHUB_ENV

      - name: Render manifest with image tag
        run: |
          $ErrorActionPreference = 'Stop'
          $src = "puck-deploy.yaml"
          if (-not (Test-Path $src)) { throw "Manifest not found: $src" }
          $content = Get-Content -Raw $src
          # Replace only the explicit token to avoid accidental matches
          $rendered = $content -replace 'smehi/puck:latest', $env:NEW_IMAGE
          $out = Join-Path $env:RUNNER_TEMP "puck-deploy.rendered.yaml"
          Set-Content -Path $out -Value $rendered -NoNewline
          "RENDERED_MANIFEST=$out" >> $env:GITHUB_ENV

      - name: Delete old deployment (one-at-a-time)
        continue-on-error: true
        run: kubectl --kubeconfig "$env:KUBECONFIG_PATH" delete deployment puck-app

      - name: Wait for termination
        run: Start-Sleep -Seconds 12

      - name: Apply rendered manifest
        run: kubectl --kubeconfig "$env:KUBECONFIG_PATH" apply -f "$env:RENDERED_MANIFEST"

      - name: Wait for deployment availability
        run: kubectl --kubeconfig "$env:KUBECONFIG_PATH" rollout status deploy/puck-app --timeout=5m

      - name: Debug on failure
        if: failure()
        run: |
          kubectl --kubeconfig "$env:KUBECONFIG_PATH" get deploy puck-app -o yaml
          kubectl --kubeconfig "$env:KUBECONFIG_PATH" get rs -l app=puck
          kubectl --kubeconfig "$env:KUBECONFIG_PATH" get pods -l app=puck -o wide
          kubectl --kubeconfig "$env:KUBECONFIG_PATH" describe deploy puck-app
          kubectl --kubeconfig "$env:KUBECONFIG_PATH" describe pods -l app=puck
          kubectl --kubeconfig "$env:KUBECONFIG_PATH" logs -l app=puck --tail=200 --all-containers=true


