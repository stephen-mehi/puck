name: build and deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: self-hosted
    defaults:
      run:
        shell: powershell
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          cache: false   # no packages.lock.json; disable built-in cache

      - name: Restore dependencies
        run: dotnet restore

      - name: Build application
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --no-build

      - name: Build the Docker image (local only)
        run: |
          $tag = "puck:$((git rev-parse --short HEAD))-$((Get-Date -Format 'yyyyMMddHHmmss'))"
          Write-Output $tag
          docker build -t $tag .

  docker:
    runs-on: self-hosted
    needs: build
    if: github.event_name == 'push'
    defaults:
      run:
        shell: powershell
    steps:
      - uses: actions/checkout@v4
  
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_UN }}
          password: ${{ secrets.DOCKERHUB_PAT }}
  
      - name: Build & Push Docker image (SHA + timestamp)
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $sha    = "${{ github.sha }}"
          $short  = $sha.Substring(0,7)
          $stamp  = Get-Date -Format 'yyyyMMddHHmmss'
          $repo   = 'smehi/puck'
      
          # Either interpolate safely with $()...
          $shaTag = "$($repo):$sha"
          $nice   = "$($repo):$short-$stamp"
      
          # ...or use -f formatting:
          # $shaTag = '{0}:{1}' -f $repo, $sha
          # $nice   = '{0}:{1}-{2}' -f $repo, $short, $stamp
      
          Write-Host "Building $shaTag and $nice"
          docker build -t "$shaTag" -t "$nice" .
          docker push "$shaTag"
          docker push "$nice"



  deploy:
    name: kubernetes deploy
    environment:
      name: dev
    runs-on: self-hosted
    needs: docker
    if: github.event_name == 'push' && needs.docker.result == 'success'
    defaults:
      run:
        shell: powershell
    env:
      NEW_IMAGE: smehi/puck:${{ github.sha }}
      KUBECONFIG_PATH: $HOME\.kube\config\client.config
    steps:
      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v3
        with:
          version: 'v1.30.0'
          
      - name: Sanity check image & container
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          $newImage = "smehi/puck:${{ github.sha }}"
          Write-Host "NEW_IMAGE = $newImage"
      
          # Use the actual file under the config directory
          $kube = Join-Path $HOME ".kube\config\client.config"
          if (-not (Test-Path $kube)) { throw "kubeconfig not found at $kube" }
      
          # Optional: verify the file is readable
          kubectl --kubeconfig "$kube" config view 1>$null
      
          $container = kubectl --kubeconfig "$kube" get deploy puck-app -o jsonpath="{.spec.template.spec.containers[0].name}"
          if ([string]::IsNullOrWhiteSpace($container)) { throw "Could not read container name from Deployment puck-app" }
          Write-Host "Container name: $container"
      
          # Stash for later steps
          "NEW_IMAGE=$newImage"       >> $env:GITHUB_ENV
          "KUBECONFIG_PATH=$kube"     >> $env:GITHUB_ENV
          "CONTAINER_NAME=$container" >> $env:GITHUB_ENV
      
      - name: Update image to new tag
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          kubectl --kubeconfig "$env:KUBECONFIG_PATH" set image deploy/puck-app "$env:CONTAINER_NAME=$env:NEW_IMAGE"
      
      - name: Wait for rollout
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          kubectl --kubeconfig "$env:KUBECONFIG_PATH" rollout status deploy/puck-app --timeout=5m

