name: build and deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v4 # Checkout the repository code
    
    - name: Setup .NET Core SDK  # Set up .NET Core SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies  # Restore project dependencies
      run: dotnet restore

    - name: Build application  # Build the ASP.NET Core application
      run: dotnet build --configuration Release

    - name: Run tests  # Run tests (if applicable)
      run: dotnet test
      
    - name: Build the Docker image
      run: |
        $tag = "puck:$(& git rev-parse --short HEAD)-$(Get-Date -Format 'yyyyMMddHHmmss')"
        Write-Output $tag
        docker build -t $tag .
        
  docker:
    runs-on: self-hosted  # Specify the runner environment

    needs: build  # Ensure that the 'build' job completes successfully before starting this job

    steps:
      - name: Checkout code  # Checkout the repository code
        uses: actions/checkout@v4
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_UN }}
          password: ${{ secrets.DOCKERHUB_PAT }}
          
      - name: Build Docker image  # Build Docker image
        run: |
          $tag = "puck:$(& git rev-parse --short HEAD)-$(Get-Date -Format 'yyyyMMddHHmmss')"
          Write-Output $tag
          docker build -t "smehi/$tag" .
          docker push "smehi/$tag"

          $content = Get-Content -Path "C:\Windows\System32\actions-runner\_work\puck\puck\puck-deploy.yaml" -Raw
          $newContent = $content -replace "puck:latest", $tag
          $newContent | Set-Content -Path "C:\Windows\System32\actions-runner\_work\puck\puck\puck-deploy.yaml"

  deploy:
    name: kubernetes deploy
    environment:
      name: dev
    runs-on: self-hosted
    needs: docker
    
    steps:
    - name: Kubectl tool installer
      uses: Azure/setup-kubectl@v3
  
    - name: Delete old deployment
      run: kubectl delete deployment puck-app

    - name: Wait For Deployment To Start
      run: Start-Sleep -Seconds 12
      
    - name: Apply pods
      run: kubectl apply -f puck-deploy.yaml --kubeconfig=$HOME\.kube\config\client.config
    
    - name: Wait For Deployment To Start
      run: Start-Sleep -Seconds 10
      
    - name: Wait For Pods To Start
      run: kubectl wait --for=condition=ready pod -l app=puck --timeout=1m --kubeconfig=$HOME\.kube\config\client.config
      
