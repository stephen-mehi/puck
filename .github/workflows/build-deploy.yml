name: build and deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: self-hosted
    defaults:
      run:
        shell: powershell
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          cache: false   # no packages.lock.json; disable built-in cache

      - name: Restore dependencies
        run: dotnet restore

      - name: Build application
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --no-build

      - name: Build the Docker image (local only)
        run: |
          $tag = "puck:$((git rev-parse --short HEAD))-$((Get-Date -Format 'yyyyMMddHHmmss'))"
          Write-Output $tag
          docker build -t $tag .

  docker:
    runs-on: self-hosted
    needs: build
    if: github.event_name == 'push'   # don't push on PRs
    defaults:
      run:
        shell: powershell
    outputs:
      full_tag: ${{ steps.build_push.outputs.full_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_UN }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - id: build_push
        name: Build & Push Docker image
        run: |
          $tag = "$((git rev-parse --short HEAD))-$((Get-Date -Format 'yyyyMMddHHmmss'))"
          $full = "smehi/puck:$tag"
          Write-Output "Building $full"
          docker build -t "$full" .
          docker push "$full"
          "full_tag=$full" >> $env:GITHUB_OUTPUT

  deploy:
    name: kubernetes deploy
    environment:
      name: dev
    runs-on: self-hosted
    needs: docker
    if: github.event_name == 'push'
    defaults:
      run:
        shell: powershell
    env:
      NEW_IMAGE: ${{ needs.docker.outputs.full_tag }}   # <-- safe hand-off
      KUBECONFIG_PATH: $HOME\.kube\config\client.config
    steps:
      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v3
        with:
          version: 'v1.30.0'
  
      - name: Sanity check image & container
        run: |
          $ErrorActionPreference = 'Stop'
          if ([string]::IsNullOrWhiteSpace($env:NEW_IMAGE)) {
            throw "NEW_IMAGE is empty. Did the docker job run and set its output?"
          }
          Write-Host "NEW_IMAGE = $env:NEW_IMAGE"
          $container = kubectl --kubeconfig $env:KUBECONFIG_PATH get deploy puck-app -o jsonpath="{.spec.template.spec.containers[0].name}"
          if ([string]::IsNullOrWhiteSpace($container)) {
            throw "Could not read container name from Deployment puck-app"
          }
          Write-Host "Container name in deployment: $container"
  
      - name: Update image to new tag
        run: |
          $ErrorActionPreference = 'Stop'
          $container = kubectl --kubeconfig $env:KUBECONFIG_PATH get deploy puck-app -o jsonpath="{.spec.template.spec.containers[0].name}"
          kubectl --kubeconfig $env:KUBECONFIG_PATH set image deploy/puck-app "$container=$env:NEW_IMAGE"
  
      - name: Wait for rollout
        run: |
          $ErrorActionPreference = 'Stop'
          kubectl --kubeconfig $env:KUBECONFIG_PATH rollout status deploy/puck-app --timeout=5m
  
      - name: Debug on failure
        if: failure()
        run: |
          kubectl --kubeconfig $env:KUBECONFIG_PATH get deploy puck-app -o wide
          kubectl --kubeconfig $env:KUBECONFIG_PATH describe deploy puck-app
          kubectl --kubeconfig $env:KUBECONFIG_PATH get pods -l app=puck-app -o wide
          kubectl --kubeconfig $env:KUBECONFIG_PATH describe pods -l app=puck-app
          kubectl --kubeconfig $env:KUBECONFIG_PATH logs -l app=puck-app --tail=200 --all-containers=true

